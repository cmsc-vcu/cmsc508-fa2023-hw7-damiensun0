---
title: Homework 7 - Creating a resume database
author: Damien Sun
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document takes the tables from the database and inserts queries in order to list several different scenarios. First thing it does is import all the libraries and dependencies that are needed for the assignment. Then in lines 29 - 52, it takes in our credentials from the .env file. After that, the actual connection occurs. After the connection happens, code for samples and a crow's foot diagram are presented.  

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-damiensun0

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

In this project we are creating a database that will serve as a comprehensive company-wide repository, documenting the combined skills and certifications of all individuals within your organization. It will store information about skills, employees, and their respective roles. This database enables your sensei to identify employees with particular skills, display the skills associated with any employee, and identify gaps in skill sets within specific roles.

## Crows-foot diagram

This is a crows-foot diagram.  It illustrates the relationships between entities in a database using symbols, including a "crow's foot" to indicate cardinality. In this case it shows the relationships between people and their roles and skills.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o{ ROLES : has
    PEOPLE }|..|{ SKILLS : has
    PEOPLE{
        int people_id
        string last_name
        string email
        string linkedin
        string headshot
        string discord
        string bio
        string date_joined
    }
    ROLES {
        int ROLES_id
        string date_assigned
    }
    SKILLS {
        int SKILLS_id
        string SKILLS_name
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe a person working in the company.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the people's skills. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles of the people in the company. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true

sql = f"""
 SELECT
 people_last_name,
 email

 from
 people a

 ORDER BY 
 ABS(people_last_name)
 ;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true

sql = f"""
 SELECT
 people_last_name,
 skills_name,
 skills_tag
 From
 peopleskills a
 INNER JOIN people b ON (a.people_id=b.people_id)
 INNER JOIN skills c ON (a.skills_id=c.skills_id)
 WHERE
 people_last_name = 'person 1'
 ;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List people names with Skill 6
```{python}
#| echo: false
#| eval: true

sql = f"""
 SELECT
 people_last_name,
 skills_name,
 skills_tag
 FROM
 peopleskills a
 INNER JOIN people b ON (a.people_id=b.people_id)
 INNER JOIN skills c ON (a.skills_id=c.skills_id)
 WHERE
 skills_tag = 'skill 6'
 ;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

sql = """
SELECT
    b.people_last_name,
    c.roles_name
FROM
    peopleroles a
INNER JOIN people b ON (a.people_id = b.people_id)
INNER JOIN roles c ON (a.roles_id = c.roles_id)
WHERE
    c.roles_name = 'Developer'
    ;
"""

try:
    df = pd.read_sql(sql, cnx)
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()

df

```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true

sql = """
SELECT
    p.people_last_name,
    p.email
FROM
    people p
LEFT JOIN peopleskills ps ON (p.people_id = ps.people_id)
WHERE
    ps.skills_id IS NULL;
"""

try:
    df = pd.read_sql(sql, cnx)
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()

df

```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true

sql = """
SELECT
    s.skills_name,
    s.skills_tag
FROM
    skills s
LEFT JOIN peopleskills ps ON (s.skills_id = ps.skills_id)
WHERE
    ps.skills_id IS NULL;
"""

try:
    df = pd.read_sql(sql, cnx)
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()

df

```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true

sql = """
SELECT
    p.people_last_name,
    s.skills_name
FROM
    people p
JOIN
    peopleroles pr ON p.people_id = pr.people_id
JOIN
    roles r ON pr.roles_id = r.roles_id
LEFT JOIN
    peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN
    skills s ON ps.skills_id = s.skills_id
WHERE
    r.roles_name = 'Boss';
"""

try:
    df = pd.read_sql(sql, cnx)
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()

df

```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true

sql = f"""
    SELECT 
    r.roles_id, 
    r.roles_name
    FROM 
    roles r
    LEFT JOIN peopleroles pr ON r.roles_id = pr.roles_id
    WHERE 
    pr.roles_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
## Reflection


I thought for the most part that this assignment was extremely good for me. I am thankful for all the guidance from professor Leonard in his lectures, it really helped with the assignment. At first, creating the queries was very exciting, but as I kept going I somehow got lost in my code and got confused. Everything got really redundant in my opinion as I kept making the queries but it did serve as good practice. Overall, I think this assignment was great. It wasn't too difficult but it was a bit time consuming, I am definitely glad I started on it a bit earlier than usual to give me time to complete it.

